---
version: 24.06

server:
  ssl:
    front_end:
      certificate:
      - "@iviadcgw_priv_pub.pem"
    applications:
      tlsv13: true

  # Enable the credviewer application.  The (un)authenticated
  # session cred can be viewed in the briser at https://<host:port>/credviewer
  # or API 
  local_applications:
      cred_viewer:
        path_segment: "credviewer"
        enable_html: true

# Authentication handled by an LUA based EAI
identity:
  eai:
    triggers:
    - /basiclogin*
    
auth_challenge_redirect:
    url: /oauth2/authorize
    parameters:
    - name: originalUrl
      source: macro
      value: URL

policies:
  authorization:
    - name: eai_unauthenticated
      paths:
        - /basiclogin
        - /basiclogin?*
        - /credviewer
      rule:   anyuser
      action: permit

    - name: testeai_trigger
      paths:
        - /oauth2/auth*
        - /oauth2/authorize
      rule:   anyauth
      action: permit

    # The agency introspects and enforces access tokens
    # Could possibly define a rule to validate tokens
    - name: diagency_unauthenticated
      paths:
        - /diagency*
      rule:   anyuser
      action: permit

    - name: op_unauthenticated
      paths:
        - /oauth2/auth*
        - /oauth2/auth/*
        - /oauth2/authorize*
        - /oauth2/authorize/*
        - /oauth2/token*
        - /oauth2/token/*
        - /oauth2/preauth*
        - /oauth2/preauth/*
        - /oauth2/introspect*
        - /oauth2/introspect/*
        - /oauth2/.well-known*
        - /oauth2/.well-known/*
        - /oauth2/userinfo*
        - /oauth2/userinfo/*
        - /oauth2/revoke*
        - /oauth2/revoke/*
        - /oauth2/device_authorization*
        - /oauth2/device_authorization/*
        - /oauth2/par*
        - /oauth2/par/*
        - /oauth2/register*
        - /oauth2/register/*
        - /oauth2/jwks*
        - /oauth2/jwks/*
      rule:   anyuser
      action: permit

  http_transformations:
    request:
      - name: map_to_oauth2_wk_config
        paths:
          - "/oauth2/.well-known/oauth-authorization-server"
        method: "GET"
        rule: |
          -- Simply route the request to .well-known/openid-configuration
          HTTPRequest.setURL("/oauth2/.well-known/openid-configuration")

      - name: basiceai
        paths:
          - "/basiclogin"
          - "/basiclogin?*"
        method: "*"
        rule: |
          -- Perform LDAP bind using basic auth header values
          print(Control.dumpContext())

          local currentAuthnUser = Session.getUsername()
          if currentAuthnUser == nil then
            print("Current authn user == nil")
          else
            print("Current authn user == " .. currentAuthnUser)
          end

          if currentAuthnUser ~= nil and currentAuthUser ~= "unauthenticated" then
            HTTPResponse.setHeader("am-eai-user-id", currentAuthnUser)
            HTTPResponse.setStatusCode(200)
            return
          end


          if HTTPRequest.containsHeader("Authorization") ~= true then


            -- Just drive the browser basic auth
            HTTPResponse.setStatusCode(401)
            HTTPResponse.setHeader("WWW-Authenticate", "Basic")
            Control.responseGenerated(true)
            return
          end

          local aznHeader = HTTPRequest.getHeader("Authorization")
          print(string.format("Found aznHeader - %s", aznHeader))

          local _, _, unamePwd = string.find(aznHeader, "Basic (%w+)")
          if not unamePwd then
            print("Missing auth header value")
            HTTPResponse.setStatusCode(401)
            HTTPResponse.setHeader("WWW-Authenticate", "Basic")
            Control.responseGenerated(true)
            return
          end
          print(string.format("Found unamePwd - %s", unamePwd))
          
          local basexx = require "basexx"
          local _, _, username, password = string.find(basexx.from_base64(unamePwd), "([%w_]+):(.*)")
          if not username or not password then
            print("Missing username or password")
            HTTPResponse.setStatusCode(401)
            HTTPResponse.setHeader("WWW-Authenticate", "Basic")
            Control.responseGenerated(true)
            return
          end

          print("Found username - " .. username)
          print("Found password - " .. password)


          -- Call ldap bind here
          local lualdap = require"lualdap"
          local userDn = string.format("cn=%s,ou=users,dc=ibm,dc=com", username)
          print("User DN == " .. userDn)

          local ld, err = lualdap.open_simple("iviadcldap:1389",
                    userDn,
                    password,
                    false)

          if ld == nil then
            print("LDAP bind returned nil: " .. err)
            HTTPResponse.setStatusCode(401)
            HTTPResponse.setHeader("WWW-Authenticate", "Basic")
            Control.responseGenerated(true)
            return
          end

          print("LDAP bind returned something valid")

          -- close the LDAP connection
          ld:close()
          HTTPResponse.setHeader("am-eai-user-id", username)
          HTTPResponse.setStatusCode(200)

      - name: map_from_oauth2_wk_config
        paths:
          - "/oauth2/.well-known/oauth-authorization-server"
        method: "GET"
        rule: |
          -- We're going to inject "code_challenge_methods_supported": [ "plain" ]
          -- into the response payload
          
          local cjson = require "cjson"
          local payload = cjson.decode(HTTPResponse.getBody())

          local pkceMethods = { "plain" }
          setmetatable(pkceMethods, cjson.array_mt)
          payload["code_challenge_methods_supported"] = pkceMethods
          HTTPResponse.setBody(cjson.encode(payload))


    postazn:
      - name: basiceaipostazn
        paths:
          - "/basiclogin"
          - "/basiclogin?*"
        method: "*"
        rule: |
          -- Set the EAI identity
          print("Entered basiceaipostazn")
          print(Control.dumpContext())
          if HTTPResponse.containsHeader("am-eai-user-id") then
            print("Setting authentication")
            Authentication.setUserIdentity(HTTPResponse.getHeader("am-eai-user-id"), false)

            local reqUrl = HTTPRequest.getURL()
            print("Request URL = " .. reqUrl)
            local _, _, targetUrl = string.find(reqUrl, "Target=(.*)")
            if targetUrl then
              local urlencode = require 'urlencode'
              targetUrl = urlencode.decode_url(targetUrl) 
              print("Target URL = " .. targetUrl)
              Authentication.setRedirectURL(targetUrl)
              return
            else
              print("TargetURL parse is nil")
            end
          end


resource_servers:
  - path: /oauth2
    transparent_path: true
    connection_type: ssl
    identity_headers:
      basic_auth:
        mode: "ignore"
      jwt:
        certificate:
        - "@ivjwt.key"
        - "@ivjwt.crt"
        hdr_name: "iv-jwt"
        claims:
          - name: "uid"
            attr: "AZN_CRED_PRINCIPAL_NAME"
    servers:
      - host: iviadcop
        port: 8436
        ssl:
          certificate:
          - "@iviadcop_pub.crt"

  - path: /diagency
    transparent_path: true
    connection_type: ssl
    identity_headers:
      basic_auth:
        mode: ignore
    servers:
      - host: iviadc
        port: 9720
        ssl:
          certificate:
          - "@iviadc_pub.crt"